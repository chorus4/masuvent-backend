import { Injectable } from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import { InjectModel } from '@nestjs/mongoose'
import { JWT } from 'google-auth-library'
import { GoogleSpreadsheet } from 'google-spreadsheet'
import { Model } from 'mongoose'
import { CreatePaymentDto } from 'src/dtos/createPayment.dto'
import { MonoService } from 'src/mono/mono.service'
import { Payment } from 'src/schemas/payment.schema'

const prices = {
	hoodie: 2700,
	zip: 2700,
	pants: 2700,
	patchedHoodie: 2700
}

@Injectable()
export class PaymentService {
	constructor(
		private readonly monoService: MonoService,
		@InjectModel(Payment.name) private paymentModel: Model<Payment>,
		private jwtService: JwtService
	) {}

	async getCredentials() {
		const creds = new JWT({
			// env var values here are copied from service account credentials generated by google
			// see "Authentication" section in docs for more info
			email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
			key: process.env.GOOGLE_PRIVATE_KEY,
			scopes: ['https://www.googleapis.com/auth/spreadsheets']
		})

		return creds
	}

	async createPayment(createPaymentDto: CreatePaymentDto) {
		let skip = false

		console.log(createPaymentDto?.token)

		try {
			const payload = await this.jwtService.verifyAsync(createPaymentDto?.token)

			if (payload.auth) skip = true
		} catch {}

		const products = createPaymentDto.products
		console.log(products)
		let amount = products.reduce(
			(acc, curVal: { type; count }) =>
				acc + prices[curVal.type] * curVal.count,
			0
		)

		switch (createPaymentDto.deliveryType) {
			case 'poland':
				amount = amount + 450
				break
			case 'germany':
				amount = amount + 600
				break
			case 'inter':
				amount = 1250
				break
		}

		// console.log({
		// 	...createPaymentDto,
		// 	country:
		// 		createPaymentDto.deliveryType == 'poland' ||
		// 		createPaymentDto.deliveryType == 'germany' ||
		// 		createPaymentDto.deliveryType == 'ukraine'
		// 			? createPaymentDto.deliveryType
		// 			: createPaymentDto.country,
		// 	price: amount
		// 	// acquiringId: data.invoiceId
		// })

		if (skip) {
			const serviceAccountAuth = await this.getCredentials()

			const doc = new GoogleSpreadsheet(
				'1Vxp1yKqXouji6UMUHzHEAqoyN2qZ-2TpzTiqIaoyrM0',
				serviceAccountAuth
			)

			// console.log(doc);
			await doc.loadInfo()
			const sheet = doc.sheetsByIndex[0]

			const text = createPaymentDto.products.reduce<any>(
				(acc, curVal: { type; count; size; color }) =>
					acc +
					`${curVal.type} - ${curVal.size} - ${curVal.color} (${curVal.count}): ${prices[curVal.type] * curVal.count}\n`,
				''
			)

			await sheet.addRow({
				ФИО: createPaymentDto.fio,
				Email: createPaymentDto.email,
				Адрес: createPaymentDto.address,
				Город: createPaymentDto.city,
				Страна: createPaymentDto.country,
				'Обратная связь': createPaymentDto.feedback,
				'Номер телефона': createPaymentDto.phone,
				Товары: text,
				Оплата: createPaymentDto.paymentType
			})

			return
		}

		const data = await this.monoService.createInvoice(amount * 100)

		const payment = new this.paymentModel({
			...createPaymentDto,
			country:
				createPaymentDto.deliveryType == 'poland' ||
				createPaymentDto.deliveryType == 'germany' ||
				createPaymentDto.deliveryType == 'ukraine'
					? createPaymentDto.deliveryType
					: createPaymentDto.country,
			price: amount,
			acquiringId: data.invoiceId
		})

		await payment.save()

		return {
			pageUrl: data.pageUrl
		}
	}

	async webhook(webhookDto) {
		const { invoiceId, status } = webhookDto
		if (status != 'success') return

		const payment = await this.paymentModel.findOne({ acquiringId: invoiceId })
		if (!payment) return

		if (payment.paymentStatus == 'success') return

		payment.paymentStatus = 'success'

		await payment.save()

		// console.log(payment)

		// TODO: Add google sheets

		const serviceAccountAuth = await this.getCredentials()

		const doc = new GoogleSpreadsheet(
			'1Vxp1yKqXouji6UMUHzHEAqoyN2qZ-2TpzTiqIaoyrM0',
			serviceAccountAuth
		)

		// console.log(doc);
		await doc.loadInfo()
		const sheet = doc.sheetsByIndex[0]

		const text = payment.products.reduce<any>(
			(acc, curVal: { type; count; size; color }) =>
				acc +
				`${curVal.type} - ${curVal.size} - ${curVal.color} (${curVal.count}): ${prices[curVal.type] * curVal.count}\n`,
			''
		)

		await sheet.addRow({
			ФИО: payment.fio,
			Email: payment.email,
			Адрес: payment.address,
			Город: payment.city,
			Страна: payment.country,
			'Обратная связь': payment.feedback,
			'Номер телефона': payment.phone,
			Товары: text,
			Оплата: payment.paymentType
		})

		return {
			success: true
		}
	}
}
